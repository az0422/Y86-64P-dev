Init:
    irmovq Stack, %rbp
    irmovq Stack, %rsp
    jmp Main
Stack:

# __fastcall int Multiply (int x, int y)
# x is passed in as %rcx, y is passed in as %rdx.
Multiply:
    # Set up stack frame.
    pushq %rbp
    rrmovq %rsp, %rbp
    pushq %rsi
    
    irmovq $-1, %rsi  # rsi = -1
    xorq %rax, %rax   # rax = 0

    # Skip multiply loop silently if multiplying by <= 0.
    andq %rdx, %rdx
    jle Multiply_End

Multiply_Loop:
    addq %rcx, %rax   # rax += rcx
    addq %rsi, %rdx   # rdx -= 1
    jne Multiply_Loop # if (rdx != 0) goto Multiply_Loop

Multiply_End:
    # Clean up stack frame.
    popq %rsi
    rrmovq %rbp, %rsp
    popq %rbp
    ret

# _cdecl int pow (int base, int exp)
Pow:
    # Set up stack frame.
    pushq %rbp
    rrmovq %rsp, %rbp
    
    irmovq $-1, %rsi      # rsi = -1
    
    # We'll use %rsi to demonstrate callee-save in Multiply,
    # since Multiply uses the callee-save %rsi register.
    mrmovq 16(%rbp), %rcx  # rcx = base
    mrmovq 24(%rbp), %rdi # rdi = exp
    
    rrmovq %rcx, %rdx     # rdx = base
    addq %rsi, %rdi       # rdi -= 1

Pow_Loop:
    pushq %rdx
    call Multiply         # rax = rcx * edx
    popq %rdx
    addq %rsi, %rdi       # rdi -= 1
    rrmovq %rax, %rcx     # rcx = rax
    jne Pow_Loop          # if (rdi != 0) goto Pow_Loop

Pow_End:
    # Clean up stack frame.
    rrmovq %rbp, %rsp
    popq %rbp
    ret

Main:

    # rax = Pow(3, 4)
    irmovq $3, %rax # base
    irmovq $4, %rbx # exponent
    pushq %rbx
    pushq %rax
    call Pow
    rrmovq %rbp, %rsp

    halt